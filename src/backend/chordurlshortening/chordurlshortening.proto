syntax = "proto3";

option go_package = "chord-url-shortening/chordurlshortening";

package chordurlshortening;

// KVPair to store key-value pairs
message KVPair {
    string key = 1;
    string val = 2;
}

// Hash as a 32-byte fixed-length byte array
message Hash {
    bytes hash = 1;
}

/* NodePointer to reference a node with an IP address and ID
message NodePointer {
    string ipAddress = 1;
    Hash id = 2;
} */

// Node data structure with its properties
message Node {
    map<string, KVPair> data = 1;
    Hash id = 2;
    string ipAddress = 3;
    repeated string fingerTable = 4;
    string pred = 5;
    string succ = 6;
}

// Request and response messages for RPC services
message FindSuccessorRequest {
    string id = 1;
}

message FindSuccessorResponse {
    string successor = 1;
}

message JoinRingRequest {
    string existingNodeIp = 1;
}

message JoinRingResponse {
    bool success = 1;
}

message NotifyRequest {
    string node = 1;
}

message NotifyResponse {
    bool acknowledged = 1;
}

message ClosestPrecedingNodeRequest {
    string id = 1;
}

message ClosestPrecedingNodeResponse {
    string node = 1;
}

message GetIpRequest {
    string node_id = 1;
}

message GetIpResponse {
    string ipAddress = 1;
}

// Service for Node RPC interactions
service NodeService {
    rpc FindSuccessor (FindSuccessorRequest) returns (FindSuccessorResponse);
    rpc JoinRing (JoinRingRequest) returns (JoinRingResponse);
    rpc Notify (NotifyRequest) returns (NotifyResponse);
    rpc ClosestPrecedingNode (ClosestPrecedingNodeRequest) returns (ClosestPrecedingNodeResponse);
    rpc GetNodeIp(GetIpRequest) returns (GetIpResponse);
}
